{"version":3,"file":"ProjectsPage-f58aab3c.js","sources":["../../../../../../../project-preview.png","../../src/pages/projects/components/ProjectStatusBadge.vue","../../src/pages/projects/widgets/ProjectCards.vue","../../src/pages/projects/widgets/ProjectsTable.vue","../../src/pages/projects/widgets/EditProjectForm.vue","../../src/pages/projects/ProjectsPage.vue"],"sourcesContent":["export default \"__VITE_PUBLIC_ASSET__27b37dd7__\"","<script setup lang=\"ts\">\nimport { PropType } from 'vue'\nimport { Project } from '../types'\n\ndefineProps({\n  status: {\n    type: String as PropType<Project['status']>,\n    required: true,\n  },\n})\n\nconst badgeColorMap: Record<Project['status'], string> = {\n  'in progress': 'primary',\n  archived: 'secondary',\n  completed: 'success',\n  important: 'warning',\n}\n</script>\n\n<template>\n  <VaBadge square :color=\"badgeColorMap[$props.status]\" :text=\"$props.status.toUpperCase()\" />\n</template>\n","<script setup lang=\"ts\">\r\nimport { PropType } from 'vue'\r\nimport { Project } from '../types'\r\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\r\n\r\ndefineProps({\r\n  projects: {\r\n    type: Array as PropType<Project[]>,\r\n    required: true,\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    required: true,\r\n  },\r\n})\r\n\r\ndefineEmits<{\r\n  (event: 'edit', project: Project): void\r\n  (event: 'delete', project: Project): void\r\n  (event: 'open', project: Project): void\r\n}>()\r\n\r\nconst avatarColor = (userName: string) => {\r\n  const colors = ['primary', '#FFD43A', '#ADFF00', '#262824', 'danger']\r\n  const index = userName.charCodeAt(0) % colors.length\r\n  return colors[index]\r\n}\r\n</script>\r\n\r\n<template>\r\n  <VaInnerLoading\r\n    v-if=\"projects.length > 0 || loading\"\r\n    :loading=\"loading\"\r\n    class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 min-h-[4rem]\"\r\n  >\r\n    <VaCard\r\n      v-for=\"project in projects\"\r\n      :key=\"project.project_name\"\r\n      :style=\"{ '--va-card-outlined-border': '1px solid var(--va-background-element)' }\"\r\n      outlined\r\n    >\r\n      <img src=\"/project-preview.png\" class=\"h-52\" />\r\n      <VaCardContent class=\"flex flex-col\">\r\n        <div class=\"text-[var(--va-secondary)]\">{{ project.creation_date }}</div>\r\n        <div class=\"flex flex-col items-center gap-4 grow\">\r\n          <h4 class=\"va-h4 text-center self-stretch overflow-hidden line-clamp-2 text-ellipsis\">\r\n            {{ project.project_name }}\r\n          </h4>\r\n          <p>\r\n            <span class=\"text-[var(--va-secondary)]\">Owner: </span>\r\n            <span>{{ project.project_owner.fullname }}</span>\r\n          </p>\r\n          <VaAvatarGroup\r\n            class=\"my-4\"\r\n            :options=\"\r\n              project.team.map((user) => ({\r\n                label: user.fullname,\r\n                src: user.avatar,\r\n                fallbackText: user.fullname[0],\r\n                color: avatarColor(user.fullname),\r\n              }))\r\n            \"\r\n            :max=\"5\"\r\n          />\r\n          <ProjectStatusBadge :status=\"project.status\" />\r\n        </div>\r\n        <VaDivider class=\"my-6\" />\r\n        <div class=\"flex justify-between\">\r\n          <!--VaButton preset=\"secondary\" icon=\"mso-edit\" color=\"secondary\" @click=\"$emit('edit', project)\" />\r\n          <VaButton preset=\"secondary\" icon=\"mso-delete\" color=\"danger\" @click=\"$emit('delete', project)\" /-->\r\n          <VaButton\r\n            preset=\"primary\"\r\n            icon=\"dashboard\"\r\n            color=\"primary\"\r\n            @click=\"$emit('open', project)\"\r\n            v-tooltip=\"'Open project in dashboard'\"\r\n            >Open project</VaButton\r\n          >\r\n        </div>\r\n      </VaCardContent>\r\n    </VaCard>\r\n  </VaInnerLoading>\r\n  <div v-else class=\"p-4 flex justify-center items-center text-[var(--va-secondary)]\">No projects</div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { PropType, computed } from 'vue'\r\nimport { defineVaDataTableColumns, VaIcon } from 'vuestic-ui'\r\nimport { Project } from '../types'\r\nimport UserAvatar from '../../users/widgets/UserAvatar.vue'\r\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\r\nimport { Pagination, Sorting } from '../../../data/pages/projects'\r\nimport { useVModel } from '@vueuse/core'\r\n\r\nconst columns = defineVaDataTableColumns([\r\n  { label: 'Project name', key: 'project_name', sortable: true },\r\n  { label: 'Project owner', key: 'project_owner', sortable: true },\r\n  { label: 'Team', key: 'team', sortable: true },\r\n  { label: 'Status', key: 'status', sortable: true },\r\n  { label: 'Creation Date', key: 'creation_date', sortable: true },\r\n  { label: ' ', key: 'actions' },\r\n])\r\n\r\nconst props = defineProps({\r\n  projects: {\r\n    type: Array as PropType<Project[]>,\r\n    required: true,\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    required: true,\r\n  },\r\n  sortBy: {\r\n    type: Object as PropType<Sorting['sortBy']>,\r\n    required: true,\r\n  },\r\n  sortingOrder: {\r\n    type: Object as PropType<Sorting['sortingOrder']>,\r\n    required: true,\r\n  },\r\n  pagination: {\r\n    type: Object as PropType<Pagination>,\r\n    required: true,\r\n  },\r\n})\r\n\r\nconst emit = defineEmits<{\r\n  (event: 'edit', project: Project): void\r\n  (event: 'delete', project: Project): void\r\n  (event: 'open', project: Project): void\r\n}>()\r\n\r\nconst avatarColor = (userName: string) => {\r\n  const colors = ['primary', '#FFD43A', '#ADFF00', '#262824', 'danger']\r\n  const index = userName.charCodeAt(0) % colors.length\r\n  return colors[index]\r\n}\r\n\r\nconst sortByVModel = useVModel(props, 'sortBy', emit)\r\nconst sortingOrderVModel = useVModel(props, 'sortingOrder', emit)\r\n\r\nconst totalPages = computed(() => Math.ceil(props.pagination.total / props.pagination.perPage))\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <VaDataTable\r\n      v-model:sort-by=\"sortByVModel\"\r\n      v-model:sorting-order=\"sortingOrderVModel\"\r\n      :items=\"projects\"\r\n      :columns=\"columns\"\r\n      :loading=\"loading\"\r\n    >\r\n      <template #cell(project_name)=\"{ rowData }\">\r\n        <div class=\"ellipsis max-w-[230px] lg:max-w-[450px]\">\r\n          {{ rowData.project_name }}\r\n        </div>\r\n      </template>\r\n      <template #cell(project_owner)=\"{ rowData }\">\r\n        <div class=\"flex items-center gap-2 ellipsis max-w-[230px]\">\r\n          <UserAvatar :user=\"rowData.project_owner\" size=\"small\" />\r\n          {{ rowData.project_owner.fullname }}\r\n        </div>\r\n      </template>\r\n      <template #cell(team)=\"{ rowData: project }\">\r\n        <VaAvatarGroup\r\n          size=\"small\"\r\n          :options=\"\r\n            (project as Project).team.map((user) => ({\r\n              label: user.fullname,\r\n              src: user.avatar,\r\n              fallbackText: user.fullname[0],\r\n              color: avatarColor(user.fullname),\r\n            }))\r\n          \"\r\n          :max=\"5\"\r\n        />\r\n      </template>\r\n      <template #cell(status)=\"{ rowData: project }\">\r\n        <ProjectStatusBadge :status=\"project.status\" />\r\n      </template>\r\n\r\n      <template #cell(actions)=\"{ rowData: project }\">\r\n        <div class=\"flex gap-2 justify-end\">\r\n          <!--VaButton\r\n            preset=\"primary\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            icon=\"mso-edit\"\r\n            aria-label=\"Edit project\"\r\n            @click=\"$emit('edit', project as Project)\"\r\n          />\r\n          <VaButton\r\n            preset=\"primary\"\r\n            size=\"small\"\r\n            icon=\"mso-delete\"\r\n            color=\"danger\"\r\n            aria-label=\"Delete project\"\r\n            @click=\"$emit('delete', project as Project)\"\r\n          /-->\r\n          <VaButton\r\n            preset=\"primary\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            icon=\"dashboard\"\r\n            @click=\"$emit('open', project as Project)\"\r\n            v-tooltip=\"'Open project in dashboard'\"\r\n            >Open project</VaButton\r\n          >\r\n        </div>\r\n      </template>\r\n    </VaDataTable>\r\n    <div class=\"flex flex-col-reverse md:flex-row gap-2 justify-between items-center py-2\">\r\n      <div>\r\n        <b>{{ $props.pagination.total }} results.</b>\r\n        Results per page\r\n        <VaSelect v-model=\"$props.pagination.perPage\" class=\"!w-20\" :options=\"[10, 50, 100]\" />\r\n      </div>\r\n\r\n      <div v-if=\"totalPages > 1\" class=\"flex\">\r\n        <VaButton\r\n          preset=\"secondary\"\r\n          icon=\"va-arrow-left\"\r\n          aria-label=\"Previous page\"\r\n          :disabled=\"$props.pagination.page === 1\"\r\n          @click=\"$props.pagination.page--\"\r\n        />\r\n        <VaButton\r\n          class=\"mr-2\"\r\n          preset=\"secondary\"\r\n          icon=\"va-arrow-right\"\r\n          aria-label=\"Next page\"\r\n          :disabled=\"$props.pagination.page === totalPages\"\r\n          @click=\"$props.pagination.page++\"\r\n        />\r\n        <VaPagination\r\n          v-model=\"$props.pagination.page\"\r\n          buttons-preset=\"secondary\"\r\n          :pages=\"totalPages\"\r\n          :visible-pages=\"5\"\r\n          :boundary-links=\"false\"\r\n          :direction-links=\"false\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.va-data-table {\r\n  ::v-deep(tbody .va-data-table__table-tr) {\r\n    border-bottom: 1px solid var(--va-background-border);\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue'\nimport { EmptyProject, Project } from '../types'\nimport { SelectOption } from 'vuestic-ui'\nimport { useUsers } from '../../users/composables/useUsers'\nimport ProjectStatusBadge from '../components/ProjectStatusBadge.vue'\nimport UserAvatar from '../../users/widgets/UserAvatar.vue'\n\nconst props = defineProps<{\n  project: Project | null\n  saveButtonLabel: string\n}>()\n\ndefineEmits<{\n  (event: 'save', project: Project): void\n  (event: 'close'): void\n}>()\n\nconst defaultNewProject: EmptyProject = {\n  project_name: '',\n  project_owner: undefined,\n  team: [],\n  status: undefined,\n}\n\nconst newProject = ref({ ...defaultNewProject })\n\nconst isFormHasUnsavedChanges = computed(() => {\n  return Object.keys(newProject.value).some((key) => {\n    if (key === 'team') {\n      return false\n    }\n\n    return (\n      newProject.value[key as keyof EmptyProject] !== (props.project ?? defaultNewProject)?.[key as keyof EmptyProject]\n    )\n  })\n})\n\ndefineExpose({\n  isFormHasUnsavedChanges,\n})\n\nwatch(\n  () => props.project,\n  () => {\n    if (!props.project) {\n      return\n    }\n\n    newProject.value = {\n      ...props.project,\n      project_owner: props.project.project_owner,\n    }\n  },\n  { immediate: true },\n)\n\nconst required = (v: string | SelectOption) => !!v || 'This field is required'\n\nconst { users: teamUsers, filters: teamFilters } = useUsers({ pagination: ref({ page: 1, perPage: 100, total: 10 }) })\nconst { users: ownerUsers, filters: ownerFilters } = useUsers({ pagination: ref({ page: 1, perPage: 100, total: 10 }) })\n</script>\n\n<template>\n  <VaForm v-slot=\"{ validate }\" class=\"flex flex-col gap-2\">\n    <VaInput v-model=\"newProject.project_name\" label=\"Project name\" :rules=\"[required]\" />\n    <VaSelect\n      v-model=\"newProject.project_owner\"\n      v-model:search=\"ownerFilters.search\"\n      searchable\n      label=\"Owner\"\n      text-by=\"fullname\"\n      track-by=\"id\"\n      :rules=\"[required]\"\n      :options=\"ownerUsers\"\n    >\n      <template #content=\"{ value: user }\">\n        <div v-if=\"user\" :key=\"user.id\" class=\"flex items-center gap-1 mr-4\">\n          <UserAvatar :user=\"user\" size=\"18px\" />\n          {{ user.fullname }}\n        </div>\n      </template>\n    </VaSelect>\n    <VaSelect\n      v-model=\"newProject.team\"\n      v-model:search=\"teamFilters.search\"\n      label=\"Team\"\n      text-by=\"fullname\"\n      track-by=\"id\"\n      multiple\n      :rules=\"[(v: any) => ('length' in v && v.length > 0) || 'This field is required']\"\n      :options=\"teamUsers\"\n      :max-visible-options=\"$vaBreakpoint.mdUp ? 3 : 1\"\n    >\n      <template #content=\"{ valueArray }\">\n        <template v-if=\"valueArray\">\n          <div v-for=\"(user, index) in valueArray\" :key=\"user.id\" class=\"flex items-center gap-1 mr-2\">\n            <UserAvatar :user=\"user\" size=\"18px\" />\n            {{ user.fullname }}{{ index < valueArray.length - 1 ? ',' : '' }}\n          </div>\n        </template>\n      </template>\n    </VaSelect>\n    <VaSelect\n      v-model=\"newProject.status\"\n      label=\"Status\"\n      :rules=\"[required]\"\n      track-by=\"value\"\n      value-by=\"value\"\n      :options=\"[\n        { text: 'In progress', value: 'in progress' },\n        { text: 'Archived', value: 'archived' },\n        { text: 'Completed', value: 'completed' },\n        { text: 'Important', value: 'important' },\n      ]\"\n    >\n      <template #content=\"{ value }\">\n        <ProjectStatusBadge v-if=\"value\" :status=\"value.value\" />\n      </template>\n    </VaSelect>\n    <div class=\"flex justify-end flex-col-reverse sm:flex-row mt-4 gap-2\">\n      <VaButton preset=\"secondary\" color=\"secondary\" @click=\"$emit('close')\">Cancel</VaButton>\n      <VaButton @click=\"validate() && $emit('save', newProject as Project)\">{{ saveButtonLabel }}</VaButton>\n    </div>\n  </VaForm>\n</template>\n\n<style lang=\"scss\" scoped>\n.va-select-content__autocomplete {\n  flex: 1;\n}\n\n.va-input-wrapper__text {\n  gap: 0.2rem;\n}\n</style>\n","<script setup lang=\"ts\">\r\nimport { ref } from 'vue'\r\nimport { useLocalStorage } from '@vueuse/core'\r\nimport { useProjects } from './composables/useProjects'\r\nimport { useRouter } from 'vue-router'\r\nimport ProjectCards from './widgets/ProjectCards.vue'\r\nimport ProjectTable from './widgets/ProjectsTable.vue'\r\nimport EditProjectForm from './widgets/EditProjectForm.vue'\r\nimport { Project } from './types'\r\nimport { useModal, useToast } from 'vuestic-ui'\r\nimport { useGlobalStore } from '@stores/global-store'\r\nimport { useLkpDataStore } from '@stores/geoscientific-project'\r\n\r\nconst doShowAsCards = useLocalStorage('projects-view', true)\r\nconst globalStore = useGlobalStore()\r\nconst dataStore = useLkpDataStore()\r\nconst router = useRouter()\r\n\r\nconst { projects, update, add, isLoading, remove, pagination, sorting } = useProjects()\r\n\r\nconst projectToEdit = ref<Project | null>(null)\r\nconst doShowProjectFormModal = ref(false)\r\n\r\nconst editProject = (project: Project) => {\r\n  projectToEdit.value = project\r\n  doShowProjectFormModal.value = true\r\n}\r\n\r\nconst openProject = (project: Project) => {\r\n  globalStore.currentProjectName = project.project_name\r\n  globalStore.currentProjectIndex = project.id\r\n  dataStore.currentDataset = project.id\r\n  router.push({ name: 'dashboard' })\r\n}\r\n\r\nconst createNewProject = () => {\r\n  projectToEdit.value = null\r\n  doShowProjectFormModal.value = true\r\n}\r\n\r\nconst { init: notify } = useToast()\r\n\r\nconst onProjectSaved = async (project: Project) => {\r\n  doShowProjectFormModal.value = false\r\n  if ('id' in project) {\r\n    await update(project as Project)\r\n    notify({\r\n      message: 'Project updated',\r\n      color: 'success',\r\n    })\r\n  } else {\r\n    await add(project as Project)\r\n    notify({\r\n      message: 'Project created',\r\n      color: 'success',\r\n    })\r\n  }\r\n}\r\n\r\nconst { confirm } = useModal()\r\n\r\nconst onProjectDeleted = async (project: Project) => {\r\n  const response = await confirm({\r\n    title: 'Delete project',\r\n    message: `Are you sure you want to delete project \"${project.project_name}\"?`,\r\n    okText: 'Delete',\r\n    size: 'small',\r\n    maxWidth: '380px',\r\n  })\r\n\r\n  if (!response) {\r\n    return\r\n  }\r\n\r\n  await remove(project)\r\n  notify({\r\n    message: 'Project deleted',\r\n    color: 'success',\r\n  })\r\n}\r\n\r\nconst editFormRef = ref()\r\n\r\nconst beforeEditFormModalClose = async (hide: () => unknown) => {\r\n  if (editFormRef.value.isFormHasUnsavedChanges) {\r\n    const agreed = await confirm({\r\n      maxWidth: '380px',\r\n      message: 'Form has unsaved changes. Are you sure you want to close it?',\r\n      size: 'small',\r\n    })\r\n    if (agreed) {\r\n      hide()\r\n    }\r\n  } else {\r\n    hide()\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <h1 class=\"page-title\">Projects</h1>\r\n\r\n  <VaCard>\r\n    <VaCardContent>\r\n      <div class=\"flex flex-col md:flex-row gap-2 mb-2 justify-between\">\r\n        <div class=\"flex flex-col md:flex-row gap-2 justify-start\">\r\n          <VaButtonToggle\r\n            v-model=\"doShowAsCards\"\r\n            color=\"background-element\"\r\n            border-color=\"background-element\"\r\n            :options=\"[\r\n              { label: 'Cards', value: true },\r\n              { label: 'Table', value: false },\r\n            ]\"\r\n          />\r\n        </div>\r\n        <!--VaButton icon=\"add\" @click=\"createNewProject\">Project</VaButton-->\r\n      </div>\r\n\r\n      <ProjectCards\r\n        v-if=\"doShowAsCards\"\r\n        :projects=\"projects\"\r\n        :loading=\"isLoading\"\r\n        @edit=\"editProject\"\r\n        @delete=\"onProjectDeleted\"\r\n        @open=\"openProject\"\r\n      />\r\n      <ProjectTable\r\n        v-else\r\n        v-model:sort-by=\"sorting.sortBy\"\r\n        v-model:sorting-order=\"sorting.sortingOrder\"\r\n        v-model:pagination=\"pagination\"\r\n        :projects=\"projects\"\r\n        :loading=\"isLoading\"\r\n        @edit=\"editProject\"\r\n        @delete=\"onProjectDeleted\"\r\n        @open=\"openProject\"\r\n      />\r\n    </VaCardContent>\r\n\r\n    <VaModal\r\n      v-slot=\"{ cancel, ok }\"\r\n      v-model=\"doShowProjectFormModal\"\r\n      size=\"small\"\r\n      mobile-fullscreen\r\n      close-button\r\n      stateful\r\n      hide-default-actions\r\n      :before-cancel=\"beforeEditFormModalClose\"\r\n    >\r\n      <h1 v-if=\"projectToEdit === null\" class=\"va-h5 mb-4\">Add project</h1>\r\n      <h1 v-else class=\"va-h5 mb-4\">Edit project</h1>\r\n      <EditProjectForm\r\n        ref=\"editFormRef\"\r\n        :project=\"projectToEdit\"\r\n        :save-button-label=\"projectToEdit === null ? 'Add' : 'Save'\"\r\n        @close=\"cancel\"\r\n        @save=\"\r\n          (project) => {\r\n            onProjectSaved(project)\r\n            ok()\r\n          }\r\n        \"\r\n      />\r\n    </VaModal>\r\n  </VaCard>\r\n</template>\r\n"],"names":["_imports_0","badgeColorMap","avatarColor","userName","colors","index","columns","defineVaDataTableColumns","props","__props","emit","__emit","sortByVModel","useVModel","sortingOrderVModel","totalPages","computed","defaultNewProject","newProject","ref","isFormHasUnsavedChanges","key","_a","__expose","watch","required","v","teamUsers","teamFilters","useUsers","ownerUsers","ownerFilters","doShowAsCards","useLocalStorage","globalStore","useGlobalStore","dataStore","useLkpDataStore","router","useRouter","projects","update","add","isLoading","remove","pagination","sorting","useProjects","projectToEdit","doShowProjectFormModal","editProject","project","openProject","notify","useToast","onProjectSaved","confirm","useModal","onProjectDeleted","editFormRef","beforeEditFormModalClose","hide"],"mappings":"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"}